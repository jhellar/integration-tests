node('osx2') {
  stage('Prepare workspace') {                    
    deleteDir()
    
    dir('app') {
      git 'https://github.com/aerogear/cordova-showcase-template.git'
    }
    
    dir('tests') {
      git 'https://github.com/jhellar/integration-tests.git'
    }

    // Restart appium
    sh """
      lsof -i tcp:4723 | grep LISTEN | awk '{print \$2}' | xargs kill
      nohup appium &>"\$HOME/appium.log" </dev/null &
    """
  }

  stage ('Install dependencies') {
    dir('app') {
      sh 'npm install'
    }
    
    dir('tests') {
      sh '''
        npm install
        npm install mocha-jenkins-reporter
      '''
    }
  }

  def platforms = ['android', 'ios']
  for (int i = 0; i < platforms.size(); i++) {
    platform = platforms[i]                      
    stage("Build ${platform}") {
      try {
        dir('app') {
          sh """
            npm run ionic:build
            ionic cordova build ${platform} --emulator
          """
        }
      } catch (Exception e) {
        currentBuild.result = 'UNSTABLE'
      }
    }

    stage ("Test ${platform}") {
      try {
        if (platform == 'android') {
            env.APP = 'app/platforms/android/app/build/outputs/apk/debug/app-debug.apk'
            env.VERSION = '8'
        } else {
            env.APP = 'app/platforms/ios/build/emulator/cordova-showcase-template.app'
            env.VERSION = '11.2'
        }
          
        dir('tests') {
          sh """
            export JUNIT_REPORT_PATH=report_${platform}.xml   
            export JUNIT_REPORT_STACK=1
            export PLATFORM=${platform}
            npm run test:cordova -- --reporter mocha-jenkins-reporter
          """
        }
      } catch (Exception e) {
        currentBuild.result = 'UNSTABLE'
      }
    }
  }

  stage('Record Results') {
    archive 'tests/report*.xml'
    junit allowEmptyResults: true, testResults: 'tests/report*.xml'
  }
}